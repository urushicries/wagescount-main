# ui_manager.py
import tkinter as tk
from tkinter import BooleanVar

class UiManager:
    """
    View ‚Äì –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É UI –∏ —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
    """
    def __init__(self, root, QOL, infoVariables, scale_factor=1):
        self.root = root
        self.QOL = QOL
        self.infoVariables = infoVariables
        self.scale_factor = scale_factor
        self.days_in_month = 31  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # Tkinter –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        self.t_wages_whole_month_var1 = BooleanVar()
        self.t_income_from_shops_var2 = BooleanVar()
        self.t_set_up_shifts_for_all_days_var3 = BooleanVar()
        
        self.presenter = None  # Presenter –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑–≤–Ω–µ
        
        self.setup_ui()
    
    # –ú–µ—Ç–æ–¥—ã, –≤—ã–∑—ã–≤–∞–µ–º—ã–µ Presenter-–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:
    def nothing_picked(self):
        self.label_error_info.config(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã \n–æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é‚ùé", font=("Arial", 30, "bold"))
        self.root.after(3000, lambda: self.label_error_info.config(text=""))
    
    def success(self):
        self.label_success_info.config(text="–£—Å–ø–µ—Ö!‚òë", font=("Arial", 30, "bold"))
        self.root.after(3000, lambda: self.label_success_info.config(text=""))
    
    def show_error(self, message):
        self.label_error_info.config(text=message, font=("Arial", 30, "bold"))
        self.root.after(3000, lambda: self.label_error_info.config(text=""))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º–µ—Å—è—Ü–∞ ‚Äì –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –ø—Ä–µ–∑–µ–Ω—Ç–µ—Ä—É
    def on_button_click(self, month):
        checkboxes = {
            'wages': self.t_wages_whole_month_var1.get(),
            'income': self.t_income_from_shops_var2.get(),
            'shifts': self.t_set_up_shifts_for_all_days_var3.get()
        }
        if self.presenter:
            self.presenter.send_request(month, checkboxes, self.days_in_month)
        else:
            print("Presenter is not set!")
            print(self.presenter)
    
    def toggle_days(self):
        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ ‚Äì –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ View (—Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)
        if (self.t_wages_whole_month_var1.get() or self.t_set_up_shifts_for_all_days_var3.get()):
            self.label_error_info.config(text=" ")
        if self.days_in_month == 15:
            self.days_in_month = 31
            self.presenter.toggle_RP_button(self.days_in_month)
            self.label_period_info.config(text=f"Count from {self.days_in_month - 15}    to:    {self.days_in_month}")
            print("–ü–æ–º–µ–Ω—è–ª –†–ü —Å \"1 –¥–æ 15\" –Ω–∞ \"16 –¥–æ 31\"")
        else:
            self.days_in_month = 15
            self.presenter.toggle_RP_button(self.days_in_month)
            self.label_period_info.config(text=f"Count from {self.days_in_month - 14}    to:    {self.days_in_month}")
            print("–ü–æ–º–µ–Ω—è–ª –†–ü —Å \"16 –¥–æ 31\" –Ω–∞ \"1 –¥–æ 15\" ")
    
    def delete_ranges(self):
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ Presenter-—É
        if self.presenter:
            self.presenter.sentRdelete()
            self.success()
    
    def setup_ui(self):
        self.root.configure(bg="black")
        btn_width = int(22 * self.scale_factor)
        font_size = int(25 * self.scale_factor)
        padx = int(10 * self.scale_factor)
        pady = int(10 * self.scale_factor)
        
        months = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        num_columns = 4  # —á–∏—Å–ª–æ –∫–æ–ª–æ–Ω–æ–∫
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
        for i, month in enumerate(months):
            button = tk.Button(self.root, text=month, height=2, width=btn_width,
                               command=lambda m=month: self.on_button_click(m),
                               bg="#000000", fg="white",
                               font=("Arial", font_size, "bold"), relief="sunken")
            row = i // num_columns
            column = i % num_columns
            button.grid(row=row, column=column, padx=padx, pady=pady, sticky="nsew")
        
        # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç—Ä–æ–∫
        for i in range(num_columns):
            self.root.grid_columnconfigure(i, weight=1, uniform="equal")
        for i in range((len(months) + num_columns - 1) // num_columns):
            self.root.grid_rowconfigure(i, weight=1, uniform="equal")
        
        # –ù–∞–¥–ø–∏—Å—å –∏–Ω—Ñ–∞ –ø—Ä–æ –ø–µ—Ä–∏–æ–¥
        self.label_period_info = tk.Label(
            self.root,
            text=f"Count from {self.days_in_month - 15}    to:    {self.days_in_month}",
            font=("Roboto", int(25 * self.scale_factor), "bold"),
            bg="black", fg="white"
        )
        self.label_period_info.grid(row=6, column=0, pady=pady, padx=padx, columnspan=3)

        #–ù–∞–¥–ø–∏—Å–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ 
        self.label_instructions = tk.Label(
            self.root,
            text=self.infoVariables.infoAboutPeriodsAndbuttons,
            font=("Roboto", int(15 * self.scale_factor), "bold"),
            bg="black", fg="white"
        )
        self.label_instructions.grid(row=3, column=1, pady=pady, columnspan=2)

        #–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –†–ü
        self.toggle_button = tk.Button(
            self.root,
            text="Change period?üîÑ",
            font=("Roboto", int(30 * self.scale_factor)),
            bg="black", fg="white", padx=btn_width//2,
            command=self.toggle_days
        )
        self.toggle_button.grid(row=6, column=1, pady=int(30 * self.scale_factor), columnspan=3)

        #–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ?
        self.delete_button = tk.Button(
            self.root,
            text="Clear everything up? üóëÔ∏è",
            font=("Roboto", int(20 * self.scale_factor)),
            bg="black", fg="white",
            command=self.delete_ranges
        )
        self.delete_button.grid(row=7, column=3, pady=int(30 * self.scale_factor))

        #–ù–∞–¥–ø–∏—Å—å –∏–Ω—Ñ–∞ –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¢–ë 
        self.labelDeleteInfo = tk.Label(
            self.root,
            text=self.infoVariables.infoAboutDeleteButton,
            font=("Roboto", int(15 * self.scale_factor), "bold"),
            bg="black", fg="white"
        )
        self.labelDeleteInfo.grid(row=8, column=3)

        #–ù–∞–¥–ø–∏—Å—å –∏–Ω—Ñ–∞ –ø—Ä–æ –≤–µ—Å—å –†–ü —Ñ—É–Ω–∫—Ü–∏–∏
        self.label_wages_info = tk.Label(
            self.root,
            text=self.infoVariables.infoaboutWagesFunc,
            font=("Roboto", int(15 * self.scale_factor), "bold"),
            bg="black", fg="white"
        )
        self.label_wages_info.grid(row=8, column=1, pady=int(20 * self.scale_factor))

        #–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–º–µ–Ω—ã –∑–∞ –≤–µ—Å—å –†–ü
        self.t_wages_whole_month_check = tk.Checkbutton(
            self.root,
            text="All shifts for period?",
            variable=self.t_wages_whole_month_var1,
            bg="white", fg="black",
            font=("Roboto", int(24 * self.scale_factor), "bold")
        )
        self.t_wages_whole_month_check.grid(row=7, column=0, pady=pady, padx=padx)

        #–ù–∞–¥–ø–∏—Å—å –∏–Ω—Ñ–∞ –ø—Ä–æ –ø—Ä–∏—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        self.label_income_info = tk.Label(
            self.root,
            text=self.infoVariables.infoaboutIncomeFunc,
            font=("Roboto", int(15 * self.scale_factor), "bold"),
            bg="black", fg="white"
        )
        self.label_income_info.grid(row=8, column=0, pady=int(20 * self.scale_factor))

        #–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–∏—Ö–æ–¥–∞ 
        self.t_income_from_shops_check = tk.Checkbutton(
            self.root,
            text="Income from arenas?",
            variable=self.t_income_from_shops_var2,
            bg="white", fg="black",
            font=("Roboto", int(24 * self.scale_factor), "bold")
        )
        self.t_income_from_shops_check.grid(row=7, column=2, pady=pady, padx=padx)

        #–ù–∞–¥–ø–∏—Å—å –∏–Ω—Ñ–∞ –ø—Ä–æ –∫–∞–∂–¥–æ–¥–Ω–µ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        self.label_daily_info = tk.Label(
            self.root,
            text=self.infoVariables.infoAboutShiftEverydayFunc,
            font=("Roboto", int(15 * self.scale_factor), "bold"),
            bg="black", fg="white"
        )
        self.label_daily_info.grid(row=8, column=2, pady=int(18 * self.scale_factor))

        #–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–º–µ–Ω—ã –Ω–∞ –≤—Å–µ –¥–Ω–∏
        self.t_set_up_shifts_for_all_days_check = tk.Checkbutton(
            self.root,
            text="Shifts for every day?",
            variable=self.t_set_up_shifts_for_all_days_var3,
            bg="white", fg="black",
            font=("Roboto", int(24 * self.scale_factor), "bold")
        )
        self.t_set_up_shifts_for_all_days_check.grid(row=7, column=1, pady=pady, padx=padx)

        #–ù–∞–¥–ø–∏—Å—å –≤–Ω–∏–∑—É
        self.label_footer_info = tk.Label(
            self.root,
            text="–∑–∞–∫—Ä—ã–≤–∞—é –≥–ª–∞–∑–∞, –∞ —Ç–∞–º –≤—Å–µ –µ—â–µ —Ç—ã...\nDose, FEDUK\nver 0.0.9",
            bg="black", fg="white",
            font=("Arial", int(14 * self.scale_factor), "bold")
        )
        self.label_footer_info.grid(row=10, column=0, columnspan=4)

        #–ù–∞–¥–ø–∏—Å—å –æ—à–∏–±–∫–∞ 
        self.label_error_info = tk.Label(
            self.root,
            text="",
            bg="black", fg="red",
            font=("Arial", int(15 * self.scale_factor))
        )
        self.label_error_info.grid(row=5, column=0)

        #–ù–∞–¥–ø–∏—Å—å —É—Å–ø–µ—Ö
        self.label_success_info = tk.Label(
            self.root,
            text="",
            bg="black", fg="lightgreen",
            font=("Arial", int(15 * self.scale_factor))
        )
        self.label_success_info.grid(row=5, column=2)
    
    def run(self):
        self.root.mainloop()
